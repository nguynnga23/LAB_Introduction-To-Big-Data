1. Tạo Cluster và Import Notebook trên Databricks
Tạo Cluster:
- Đăng nhập vào tài khoản Databricks của bạn.
- Chọn mục "Clusters" từ thanh điều hướng bên trái.
- Nhấn vào nút "Create Cluster."
- Điền các thông tin cần thiết (tên, loại máy, phiên bản, v.v.) và nhấn "Create."

Import Notebook:
- Vào mục "Workspace" trên Databricks.
- Nhấn vào nút "Import" ở góc trên bên phải.
- Chọn file notebook (định dạng .dbc hoặc .ipynb) từ máy tính của bạn và nhấn "Import."

2. Ôn Lại Kiến Thức về Phân Lớp trong Machine Learning
Hồi Quy Logistic:
    Hồi quy logistic là một mô hình thống kê dùng để dự đoán xác suất của một sự kiện nhị phân.
    Hàm logistic được sử dụng để ước lượng xác suất.
Cây Quyết Định:
    Cây quyết định là một phương pháp phân loại dựa trên các quyết định phân nhánh.
        Các tham số quan trọng:
        max_depth: Độ sâu tối đa của cây.
        min_samples_split: Số lượng mẫu tối thiểu để chia nút.
        min_samples_leaf: Số lượng mẫu tối thiểu tại nút lá.
Tuning Hyperparameters:
    Sử dụng Grid Search hoặc Random Search để tối ưu hóa các tham số hyperparameter.
    Kết hợp với cross-validation để cải thiện độ chính xác.
3. Thực Hiện Bài Tập
Khớp Mô Hình Sử Dụng Thuật Toán Random Forest:
    from sklearn.ensemble import RandomForestClassifier
    from sklearn.model_selection import train_test_split, cross_val_score
    from sklearn.datasets import load_iris
    import pandas as pd

    # Tải dữ liệu
    data = load_iris()
    X = data.data
    y = data.target

    # Chia dữ liệu thành tập huấn luyện và kiểm tra
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # Khớp mô hình Random Forest
    rf_model = RandomForestClassifier(random_state=42)
    rf_model.fit(X_train, y_train)
Tuning Hyperparameter Dùng Cross Validation:
    from sklearn.model_selection import GridSearchCV

    # Định nghĩa tham số hyperparameter
    param_grid = {
        'max_depth': [None, 5, 10, 15, 20],
    }

    # Tuning với Grid Search
    grid_search = GridSearchCV(estimator=rf_model, param_grid=param_grid, cv=5)
    grid_search.fit(X_train, y_train)

    # In kết quả tốt nhất
    print("Tham số tốt nhất:", grid_search.best_params_)
Test Mô Hình:
# Dự đoán trên tập kiểm tra
    y_pred = grid_search.predict(X_test)

    # Đánh giá mô hình
    from sklearn.metrics import accuracy_score, classification_report

    print("Độ chính xác:", accuracy_score(y_test, y_pred))
    print("Báo cáo phân loại:\n", classification_report(y_test, y_pred))
